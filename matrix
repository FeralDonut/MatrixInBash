#!/bin/bash


#function for dims
dims()
{
  #count rows
  #reference for wc -l https://www.tecmint.com/wc-command-examples/
  rowNum="$(wc -l < $matrixFile)"

  #count the number of columns by counting elements in the first line of the matrixFile
  colNum=$( head -n 1 $matrixFile | wc -w)  

  echo -e "$rowNum $colNum"

}


transpose()
{

  cat "$matrixFile" > tempRow1$$

  #count the number of columns by counting elements in the first line of the matrixFile
  colNum=$( head -n 1 $matrixFile | wc -w) 
 
  #count rows
  #reference for wc -l https://www.tecmint.com/wc-command-examples/
  rowNum="$(wc -l < tempRow1$$)"

  i=0
  while [ $i -lt $colNum ]
  do

    
    #increment counter
    i=$((i+1))
    #Transpose from tempRow1 to tempRow2 of the temp from PID
    cat tempRow1$$ | cut -f "$i" | tr '\n' '\t' | cut -f -"$rowNum" >> tempRow2$$


  done
  cat tempRow2$$

  rm -f tempRow*
}

mean ()
{
  tempMean="temporaryMeanFile"
  tempCol="tempColumnFile"
  tempRow="tempRowFile"

  #count the number of columns by counting elements in the first line of the matrixFile
  colNum=$( head -n 1 $matrixFile | wc -w) 

  i=1
  #loop through each column
  while [[ $i -le $colNum ]]
  do
    count=0
    sum=0
    cut -f $i $matrixFile > $tempCol

    while read num
    do
       sum=`expr $sum + $num`
       count=`expr $count + 1`
      
    done <$tempCol

  #Equation given to us in program description
  mean=$(((sum + (count/2)*( (sum>0)*2-1 )) / count))

 echo "$mean" > "$tempMean"
#cat $tempMean | tr "\n" "\t" > "$tempRow"


  if [ $i -lt  $((colNum)) ]
  then
  
  emptyTab=$((colNum+1))
    #cut the emtpy tab that shows up at the beginning
    cat $tempMean | cut -f 2-"$emptyTab" | tr "\n" "\t" > $tempRow
  else
    cat $tempMean > $tempRow
  fi
  #send the temp files on a dumpster dive
  cat $tempRow 


  #increment the counter
    i=$((i+1))

done

#new line


rm -f temp*
   

}

add()
{
  touch tempMatrix_0$$
  #count the number of columns by counting elements in the first line of the matrixFile
  colNum=$( head -n 1 $matrixOne | wc -w) 
  rowNum="$(wc -l < $matrixOne )" 

  i=1
  #do the adding
  while [ $i -le $colNum ]
  do
    num=$((i-1))
    #cut from matrix 1 and 2
    cat $matrixOne | cut -f "$i" > tempMat1$$ 
    cat $matrixTwo | cut -f "$i" > tempMat2$$ 
    
    j=1
    while [ $j -le $rowNum ]
    do
      #set two numbers to be added together to appropriate variables
      tempNum1="$(cat tempMat1$$ | head -n "$j" | tail -n 1)"
      tempNum2="$(cat tempMat2$$ | head -n "$j" | tail -n 1)"
      
      #sum the two numbers together
      sum=`expr $tempNum1 + $tempNum2`

      #store sum in a third file using PID
      echo "$sum" >> tempAddMat$i$$

      #increment counter
      j=$((j+1))
    done

    paste tempMatrix_$num$$ tempAddMat$i$$ > tempMatrix_$i$$

    #increment the counter
    i=$((i+1))
  done

  emptyTab=$((colNum+1))
  #cut the emtpy tab that shows up at the beginning
  cat tempMatrix_$colNum$$ | cut -f 2-"$emptyTab" > tempSumMat$$ 
  #send the temp files on a dumpster dive

  cat tempSumMat$$
}

multiply()
{


  i=1

  #count the number of columns by counting elements in the first line of the matrixFile
  colOneNum=$( head -n 1 $matrixOne | wc -w) 
  colTwoNum=$( head -n 1 $matrixTwo | wc -w) 

  #count the number of rows in each matrix
  rowOneNum="$(wc -l < $matrixOne )"
  rowTwoNum="$(wc -l < $matrixTwo )"

#read in matrixOne into an array   
for((i=0;i<$rowOneNum;i++ ))
do

    j=$((i+1))
   
    the_row="$(cat $matrixOne | head -n $j | tail -n 1)"
    echo $the_row > aa
    for((ii=0;ii<$colOneNum;ii++ ))
    do

        jj=$((ii+1))
        #cutting the column
        varb=$(cut -f $jj -d " " aa)
        #calculating the index spot
        index=$((i*colOneNum+ii))
        #placing into the array
        mat1Array[$index]=$varb
    done
done


#read in matrixTwo into an array   
for((i=0;i<$rowTwoNum;i++ ))
do
    j=$((i+1))
   
    the_row="$(cat $matrixTwo | head -n $j | tail -n 1)"
    echo $the_row > aa
    for((ii=0;ii<$colTwoNum;ii++ ))
    do
        jj=$((ii+1))
        #cutting the column
        varb=$(cut -f $jj -d " " aa)
        #calculating the index spot
        index=$((i*colTwoNum+ii))
        #placing into the array
        mat2Array[$index]=$varb
    done
done



for ((i=0; i<$rowOneNum; i++))
do
    for ((j=0; j<$colTwoNum; j++))
    do

       
result=0
        for ((k=0; k<$rowOneNum; k++))
        do
          idx1=$(( i*rowOneNum+k ))

          idx2=$(( k*colTwoNum+j ))

          v1=${mat1Array[idx1]}
          v2=${mat2Array[idx2]}
          result=$(( result+v1*v2 ))


        done

        idx3=$(( i*$colTwoNum+j ))
        product[$idx3]=$result
    done
done
#echo "product:"
#printf '%s\n' "${product[@]}"

for ((i=0; i<$rowOneNum; i++))
do
    for ((j=0; j<$rowOneNum; j++))
    do
      idx3=$(( i*$colTwoNum+j ))
      echo -n ${product[idx3]} >> tempMultMat
      if [ $j -lt $(( rowOneNum-1 )) ]
      then
        echo -n -e "\t" >> tempMultMat
      else
        echo "" >> tempMultMat
      fi
    done
done
cat tempMultMat
}

trapCatch()
{
  rm -f temp*
  exit 1
}

  #DIMS & TRANSPOSE & MEAN

  #Since dims and mean both only need one matrix will check to see if dims or mean was passed
  #as the first argument before checking the number of matrices passed
  if [ $1 = "dims" ] || [ $1 = "transpose" ] || [ $1 = "mean" ]
    then

      #print to stderr if too many arguments are passed in
      if (( $# > 2 ))
      then
          echo "Too many arguments for $1" 1>&2
          exit 1
      fi

      #check to see if anything was passed in with function name
      if [ $# -eq 1 ]
        then
           matrixFile=temp
           cat > $matrixFile

      fi
    

      #print to stderr if the file is not readable
      #source on how to tell a file is readable
      #https://askubuntu.com/questions/558977/checking-for-a-file-and-whether-it-is-readable-and-writable
      if [ ! -r $2 ]
      then
       echo "$2 is not a readable file" 1>&2
       exit 1
      fi


      if [ $# -gt 1 ]
      then
         matrixFile=$2
       fi


      if [ $1 = "dims" ]
      then
        dims $matrixFile
      fi

      if [ $1 = "mean" ]
      then
	      mean $matrixFile
      fi

      if [ $1 = "transpose" ]
      then
        transpose $matrixFile
      fi


    fi

    #ADD
    if [ $1 = "add" ]
    then

      #Check to see if enough arguments have been passed
      if [ $# -ne 3 ]
      then
        echo "Invalid number of arguments" 1>&2
        exit 1
      fi

      #Check to see that both files are readable
      if [ ! -r $2 ] || [ ! -r $3 ]
      then
        echo "One or more of your files are not readable" 1>&2
        exit 1
      fi

      if [ $# -eq 3 ]
      then
         matrixOne=$2
         matrixTwo=$3
      fi

      #grab row and column for each matrix                                                                
      colMatOne=$( head -n 1 $matrixOne | wc -w)  
      rowMatOne=$(wc -l < $matrixOne)
      colMatTwo=$( head -n 1 $matrixTwo | wc -w)                              
      rowMatTwo=$(wc -l < $matrixTwo)  

      #compare the rows and columns to make sure they are the same dimension
      if [ $colMatOne -ne $colMatTwo ] || [ $rowMatOne -ne $rowMatTwo ]
      then
         echo "Matrices not the same dimension" 1>&2
         exit 1
      fi

  add $matrixOne $matrixTwo
  fi

  #Multiply
  if [ $1 = "multiply" ]
  then

    #Check to see if enough arguments have been passed
    if [ $# -ne 3 ]
    then
      echo "Invalid number of arguments" 1>&2
      exit 1
    fi

    #Check to see that both files are readable
    if [ ! -r $2 ] || [ ! -r $3 ]
    then
      echo "One or more of your files are not readable" 1>&2
      exit 1
    fi

    if [ $# -eq 3 ]
    then
       matrixOne=$2
       matrixTwo=$3
    fi

    #grab row number from first matrix and column count for second matrix                                                                
    
    colMatOne=$( head -n 1 $matrixOne | wc -w)  
    rowMatOne=$(wc -l < $matrixOne)
    colMatTwo=$( head -n 1 $matrixTwo | wc -w)                              
    rowMatTwo=$(wc -l < $matrixTwo)                             

    #compare the rows and columns to make sure they are the same dimension
    if [ $rowMatOne -ne $colMatTwo ] || [ $rowMatTwo -ne $colMatOne ]
    then
       echo "Number of rows from one matrix must match the number of columns from the other matrix" 1>&2
       exit 1
    fi

multiply $matrixOne $matrixTwo
fi


#trap trapCatch 
trap "rm -f $temp*;  exit 1" INT


rm -f temp*

